# CircleCI v2.1 Config
version: 2.1

##
# orbs
#
# Orbs used in this pipeline
##
orbs:
  slack: circleci/slack@3.4.2
  pr-tools: mojaloop/pr-tools@0.1.10

##
# defaults
#
# yaml templates to be shared across jobs
##
defaults_Dependencies: &defaults_Dependencies
  name: Install default dependencies
  command: |
    apk --no-cache add git
    apk --no-cache add bash
    apk --no-cache add ca-certificates
    apk --no-cache add curl
    apk --no-cache add openssh-client
    apk add --no-cache -t python2
    apk add --no-cache -t build-dependencies make gcc g++ libtool autoconf automake

defaults_license_scanner: &defaults_license_scanner
  name: Install and set up license-scanner
  command: |
    git clone https://github.com/mojaloop/license-scanner /tmp/license-scanner
    cd /tmp/license-scanner && make build default-files set-up
    echo 'export mode=docker' >> $BASH_ENV
    dockerImages=`cd /home/circleci/project && ./.circleci/format-docker-images.sh`
    echo "dockerImages are $dockerImages"
    echo "export dockerImages=\"${dockerImages}\"" >> $BASH_ENV

defaults_Environment: &defaults_environment
  name: Set default environment
  command: |
    echo "Adding repos necessary for publishing process"
    helm repo add bitnami https://charts.bitnami.com/bitnami
    ## The following repo is a Work-around for Bitnami retention policy issue: https://github.com/bitnami/charts/issues/10539, fix: https://github.com/mojaloop/project/issues/2815
    helm repo add bitnami-full-index https://raw.githubusercontent.com/bitnami/charts/archive-full-index/bitnami
    helm repo add ory https://k8s.ory.sh/helm/charts
    helm repo add kowl https://raw.githubusercontent.com/cloudhut/charts/master/archives
    helm repo add reporting-k8s-templates https://mojaloop.github.io/reporting-k8s-templates
    helm repo update

##
# Executors
#
# CircleCI Executors
##
executors:
  default-docker-helm:
    working_directory: /home/circleci/project
    docker:
      - image: alpine/helm:3.5.0

  default-machine:
    machine:
      image: ubuntu-2004:202010-01

##
# Jobs
#
# A map of CircleCI jobs
##
jobs:
  # setup:
  #   executor: default-docker-helm
  #   steps:
  #     - checkout
  #     - run:
  #         name: Placeholder for setup
  #         command: echo "Placeholder for setup - Nothing to do here"

  # test:
  #   executor: default-docker-helm
  #   steps:
  #     - checkout
  #     - run:
  #         <<: *defaults_Dependencies
  #     - run:
  #         <<: *defaults_environment
  #     - run:
  #         name: Linting Helm Charts
  #         command: |
  #           bash lint-charts.sh

  # audit-licenses:
  #   executor: default-machine
  #   steps:
  #     - checkout
  #     - run:
  #         <<: *defaults_license_scanner
  #     - run:
  #         name: Set up nvm
  #         command: |
  #           # Note: this needs to be separate from the nvm install step
  #           echo 'export NVM_DIR="/opt/circleci/.nvm"' >> $BASH_ENV
  #           echo "[ -s \"$NVM_DIR/nvm.sh\" ] && . \"$NVM_DIR/nvm.sh\"" >> $BASH_ENV
  #     - run:
  #         name: Set up correct node version
  #         command: |
  #           nvm install v10.15.3 && nvm alias default v10.15.3
  #           node --version
  #     - run:
  #         name: Run the license-scanner
  #         command: |
  #           source $BASH_ENV
  #           env | grep docker
  #           cd /tmp/license-scanner && make run
  #     - run:
  #         name: Build and save license-scanner summary
  #         command: |
  #           node --version
  #           cd /tmp/license-scanner && make postprocess
  #     - run:
  #         name: If this is a release, upload the license-scanner file to the github release
  #         command: |
  #           if [ "${CIRCLE_TAG}" = "" ]; then
  #             exit 0
  #           fi
  #           mv /tmp/license-scanner/results/license-summary.xlsx ./license-summary-${CIRCLE_TAG}.xlsx
  #           .circleci/upload-github-release-asset.sh github_api_token=$GITHUB_TOKEN owner=mojaloop repo=helm tag=${CIRCLE_TAG} filename=license-summary-${CIRCLE_TAG}.xlsx

  #     - store_artifacts:
  #         path: /tmp/license-scanner/results
  #         prefix: licenses

  build-and-test:
    executor: default-docker-helm
    steps:
      - checkout
      - run:
          <<: *defaults_Dependencies
      - run:
          <<: *defaults_environment
      - run:
          name: Update Helm Charts
          command: ./scripts/update-charts-dep.sh
      - run:
          name: Linting Helm Charts
          command: ./scripts/lint-charts.sh

  install-and-test-v1-20:
    executor: default-machine
    steps:
      - checkout
      - run:
          name: utils
          command: |
            whoami
            curl https://cli-assets.heroku.com/apt/release.key | sudo apt-key add -
            curl https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
            sudo apt-get update
            sudo apt-get install snapd
            sudo apt-get install bc
            # install helm and give access to root user
            sudo snap install helm --classic
            sudo ln -s /snap/bin/helm /usr/local/bin/helm
            # We don't need to run update-charts-dep, as package does this for us
            ./scripts/package.sh
      - run:
          name: k8s-version-test
          command: |
            echo 'export KUBECONFIG=/tmp/k3s.yaml' >> $BASH_ENV
            sudo CHARTS_WORKING_DIR=/home/circleci/project ./scripts/k8s-versions-test.sh  -m install -v v1.20 -u `whoami` -t 1000s
          no_output_timeout: 10m
      - run:
          name: Get the kubectl log
          command: |
            kubectl get events --sort-by=.metadata.creationTimestamp > /tmp/k8s_events
          when: on_fail
      - store_artifacts:
          path: /tmp/k8s_events

  install-and-test-v1-21:
    executor: default-machine
    steps:
      - checkout
      - run:
          name: utils
          command: |
            whoami
            curl https://cli-assets.heroku.com/apt/release.key | sudo apt-key add -
            curl https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
            sudo apt-get update
            sudo apt-get install snapd
            sudo apt-get install bc
            # install helm and give access to root user
            sudo snap install helm --classic
            sudo ln -s /snap/bin/helm /usr/local/bin/helm
            # We don't need to run update-charts-dep, as package does this for us
            ./scripts/package.sh
      - run:
          name: k8s-version-test
          command: |
            echo 'export KUBECONFIG=/tmp/k3s.yaml' >> $BASH_ENV
            sudo CHARTS_WORKING_DIR=/home/circleci/project ./scripts/k8s-versions-test.sh  -m install -v v1.21 -u `whoami` -t 1000s
          no_output_timeout: 10m
      - run:
          name: Get the kubectl log
          command: |
            kubectl get events --sort-by=.metadata.creationTimestamp > /tmp/k8s_events
          when: on_fail
      - store_artifacts:
          path: /tmp/k8s_events

  install-and-test-v1-22:
    executor: default-machine
    steps:
      - checkout
      - run:
          name: utils
          command: |
            whoami
            curl https://cli-assets.heroku.com/apt/release.key | sudo apt-key add -
            curl https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
            sudo apt-get update
            sudo apt-get install snapd
            sudo apt-get install bc
            # install helm and give access to root user
            sudo snap install helm --classic
            sudo ln -s /snap/bin/helm /usr/local/bin/helm
            # We don't need to run update-charts-dep, as package does this for us
            ./scripts/package.sh
      - run:
          name: k8s-version-test
          command: |
            echo 'export KUBECONFIG=/tmp/k3s.yaml' >> $BASH_ENV
            sudo CHARTS_WORKING_DIR=/home/circleci/project ./scripts/k8s-versions-test.sh  -m install -v v1.22 -u `whoami` -t 1000s
          no_output_timeout: 10m
      - run:
          name: Get the kubectl log
          command: |
            kubectl get events --sort-by=.metadata.creationTimestamp > /tmp/k8s_events
          when: on_fail
      - store_artifacts:
          path: /tmp/k8s_events

  deploy:
    executor: default-docker-helm
    steps:
      - checkout
      - run:
          <<: *defaults_Dependencies
      - run:
          <<: *defaults_environment
      - run:
          name: setup environment vars
          command: |
            echo 'export GITHUB_TARGET_BRANCH=repository' >> $BASH_ENV
            echo 'export GITHUB_TOKEN=$GITHUB_TOKEN' >> $BASH_ENV
            echo 'export GITHUB_PROJECT_USERNAME=$CIRCLE_PROJECT_USERNAME' >> $BASH_ENV
            echo 'export GITHUB_PROJECT_REPONAME=$CIRCLE_PROJECT_REPONAME' >> $BASH_ENV
            echo 'export GITHUB_TAG=$CIRCLE_TAG' >> $BASH_ENV
            echo 'export GIT_CI_USER=$GIT_CI_USER' >> $BASH_ENV
            echo 'export GIT_CI_EMAIL=$GIT_CI_EMAIL' >> $BASH_ENV
            echo 'export GIT_SHA1=$CIRCLE_SHA1' >> $BASH_ENV
            echo 'export BUILD_NUM=$CIRCLE_BUILD_NUM' >> $BASH_ENV
      - run:
          name: Setup Git Identity
          command: |
            echo "Setting BASH_ENV..."
            source $BASH_ENV

            git config --global user.email "$GIT_CI_USER"
            git config --global user.password "$GIT_CI_PASSWORD"
            git config --global user.name "$GIT_CI_EMAIL"
            git remote add $GITHUB_PROJECT_USERNAME https://$GIT_CI_USER:$GITHUB_TOKEN@github.com/$GITHUB_PROJECT_USERNAME/$GITHUB_PROJECT_REPONAME.git
      - run:
          name: Publish Helm Charts
          command: .circleci/publish_helm_charts.sh

  slack-announcement:
    executor: default-docker-helm
    steps:
      - run:
          <<: *defaults_Dependencies
      - slack/status:
          webhook: "$SLACK_WEBHOOK_ANNOUNCEMENT"
          success_message: '*"${CIRCLE_PROJECT_REPONAME}"* - Release \`"${CIRCLE_TAG}"\` \nhttps://github.com/mojaloop/"${CIRCLE_PROJECT_REPONAME}"/releases/tag/"${CIRCLE_TAG}"'

workflows:
  version: 2
  build_and_test:
    jobs:
      - pr-tools/pr-title-check:
          context: org-global
          filters:
            tags:
              ignore: /.*/
            branches:
              ignore:
                - master
      # - setup:
      #     context: org-global
      #     filters:
      #       tags:
      #         only: /.*/
      # - test:
      #     context: org-global
      #     requires:
      #       - setup
      #     filters:
      #       tags:
      #         only: /.*/
      # - audit-licenses:
      #     context: org-global
      #     requires:
      #       - setup
      #     filters:
      #       tags:
      #         only: /.*/
      - build-and-test:
          context: org-global
          requires: []
            # - test
            # - audit-licenses
          filters:
            tags:
              only: /.*/
      - install-and-test-v1-20:
          context: org-global
          requires: 
            - build-and-test
      - install-and-test-v1-21:
          context: org-global
          requires: 
            - build-and-test
      - install-and-test-v1-22:
          context: org-global
          requires: 
            - build-and-test
      - deploy:
          context: org-global
          requires:
            - build-and-test
          filters:
            tags:
              only: /v[0-9]+(\.[0-9]+)*/
            branches:
              only: master
      - slack-announcement:
          context: org-global
          requires:
            - deploy
          filters:
            tags:
              only: /v[0-9]+(\.[0-9]+)*/
            branches:
              ignore: /.*/
