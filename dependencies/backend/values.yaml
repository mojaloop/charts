## Values configuration for Mojaloop Backend Dependencies
# helm repo add bitnami https://charts.bitnami.com/bitnami
# helm repo add cloudhut https://raw.githubusercontent.com/cloudhut/charts/master/archives
# helm install backend ./dependencies/backend
# helm upgrade backend ./dependencies/backend --install

global:
  mojalooprole: {}

################################################################
## Kafka Backend Dependency
kafka:
  enabled: true
  fullnameOverride: "kafka"
  deleteTopicEnable: true
  persistence:
    enabled: false
  metrics:
    kafka:
      enabled: true
    jmx:
      enabled: true
    serviceMonitor:
      enabled: true
  zookeeper:
    enabled: true

################################################################
## MySQL Backend Dependency
mysql:
  enabled: true
  fullnameOverride: "mysql"
  architecture: replication
  auth:
    rootPassword: "rootPassword"
    database: default
    username: "user"
    password: "password"
    replicationUser: replicator
    replicationPassword: "password"
    forcePassword: true
  initdbScripts:
      # This script enables legacy authentication for MySQL v8. NodeJS MySQL Client currently does not support authentication plugins, reference: https://github.com/mysqljs/mysql/pull/2233
      enableLegacyAuth.sql: |-
        ALTER USER 'user'@'%' IDENTIFIED WITH mysql_native_password BY 'password';
  metrics:
    enabled: true
    serviceMonitor:
      enabled: true

################################################################
## Kowl Backend Dependency
kowl:
  enabled: true
  resources:
    limits:
      cpu: 500m
      memory: 256Mi
    requests:
      cpu: 10m
      memory: 64Mi

  kowl:
    # See reference config: https://github.com/cloudhut/kowl/blob/master/docs/config/kowl.yaml)
    config:
      kafka:
        brokers:
          - kafka-headless:9092

  ingress:
    enabled: true
    hosts:
      - host: kowl.local
        paths: ['/']
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local

################################################################
## MongoDB Backend Dependency
mongodb:
  enabled: true
  fullnameOverride: "mongodb"

  auth:
    rootUser: root
    rootPassword: "rootPassword"
    username: "user"
    password: "password"
    database: "default"

  resources:
    requests:
      cpu: 10m
      memory: 256Mi

################################################################
## Ory Keto Backend Dependency
keto:
  enabled: true
  fullnameOverride: "keto"
  keto:
    # https://www.ory.sh/keto/docs/reference/configuration
    config:
      namespaces:
        - id: 0
          name: role
        - id: 1
          name: permission

oathkeeper:
  enabled: true
  fullnameOverride: "oathkeeper"
  oathkeeper:
    config:
      log:
        level: trace
      access_rules:
        matching_strategy: regexp
      authenticators:
        cookie_session:
          enabled: true
          config:
            # this should be the internal URL of the public Kratos service's whoami endpoint, which might look like the below
            check_session_url: http://kratos-public/sessions/whoami
            preserve_path: true
            # this means we automatically sweep up all the metadata kratos provides for use
            # in, for example, the JWT, if we ever have more
            extra_from: "@this"
            # kratos will be configured to put the subject from the IdP here
            subject_from: "identity.id"
            only:
            - ory_kratos_session
        oauth2_introspection:
          enabled: true
          config:
            introspection_url: https://whatever/the/wso2/url/is/oauth2/introspect
            introspection_request_headers:
            # see https://is.docs.wso2.com/en/latest/learn/invoke-the-oauth-introspection-endpoint/ for what credentials
            # will need to be configured here
            # also, this does not seem to be settable via environment variable, which means it is
            authorization: "Basic SOME WORKING AUTH HERE"
            cache:
              # disabled to make debugging easier. enable for caching.
              enabled: false
              ttl: "60s"
      authorizers:
        remote_json:
          enabled: true
          config:
            # the check URL for Keto. This will be POST'd to. See https://www.ory.sh/keto/docs/reference/rest-api#operation/postCheck
            remote: http://internal-keto-url-here/check
      mutators:
        id_token:
          enabled: true
          config:
            # this should be the internal base URL for the API service, which will look something like the below
            issuer_url: http://whatever-oathkeeper-internal-is-api:4456/
      errors:
        fallback:
          - json
        handlers:
          json:
            # this gives API clients pretty error JSON
            enabled: true
            config:
              verbose: true
          redirect:
            enabled: true
            config:
              # set this to whatever the main URL is, it'll ensure that browser errors redirect there
              to: https://whatever-external-main-url-is/
              when:
              - error:
                - unauthorized
                - forbidden
                request:
                header:
                  accept:
                  - text/html
    managedAccessRules: false
#  secret:
#    manage: false
#    name: "oathkeeper-jwks"

  deployment:
    extraEnv:
      # for whatever reason this environment variable only gets set if the JWKS is in the config even though the rest of the secret mounting
      # and such still happens
      - name: MUTATORS_ID_TOKEN_CONFIG_JWKS_URL
        value: file:///etc/secrets/mutator.id_token.jwks.json

  maester:
    oathkeeperFullnameOverride: 'oathkeeper'

  oathkeeper-maester:
    fullnameOverride: 'oathkeeper-maester'

wso2:
  config:

mojalooprole: {}
